{"ast":null,"code":"var _class;\nimport { environment } from './../../../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SearchService {\n  constructor(http) {\n    this.http = http;\n    this.URL = environment.api;\n  }\n  searchTracks$(term) {\n    return this.http.get(`${this.URL}/tracks?src=${term}`).pipe(map(dataRaw => dataRaw.data));\n  }\n  filterResults(data, term) {\n    // Filtra los resultados según la lógica deseada\n    return data.filter(track => this.isMatch(track, term));\n  }\n  isMatch(track, term) {\n    // Implementa la lógica de comparación aquí, por ejemplo, comparación de nombres, artistas, etc.\n    const trackName = track.name.toLowerCase();\n    const artistName = track.artist.toLowerCase();\n    const searchTerm = term.toLowerCase();\n    return trackName.includes(searchTerm) || artistName.includes(searchTerm);\n  }\n}\n_class = SearchService;\n_class.ɵfac = function SearchService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA,SAASA,WAAW,QAAQ,wCAAwC;AAIpE,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFP,QAAG,GAAGJ,WAAW,CAACK,GAAG;EAEE;EAExCC,aAAa,CAACC,IAAY;IACxB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACC,GAAG,eAAeF,IAAI,EAAE,CAAC,CACnDG,IAAI,CACHT,GAAG,CAAEU,OAAY,IAAKA,OAAO,CAACC,IAAI,CAAC,CACpC;EACL;EAEUC,aAAa,CAACD,IAAW,EAAEL,IAAY;IAC/C;IACA,OAAOK,IAAI,CAACE,MAAM,CAACC,KAAK,IAAI,IAAI,CAACC,OAAO,CAACD,KAAK,EAAER,IAAI,CAAC,CAAC;EACxD;EAEQS,OAAO,CAACD,KAAU,EAAER,IAAY;IACtC;IACA,MAAMU,SAAS,GAAGF,KAAK,CAACG,IAAI,CAACC,WAAW,EAAE;IAC1C,MAAMC,UAAU,GAAGL,KAAK,CAACM,MAAM,CAACF,WAAW,EAAE;IAC7C,MAAMG,UAAU,GAAGf,IAAI,CAACY,WAAW,EAAE;IAErC,OAAOF,SAAS,CAACM,QAAQ,CAACD,UAAU,CAAC,IAAIF,UAAU,CAACG,QAAQ,CAACD,UAAU,CAAC;EAC1E;;SAxBWpB,aAAa;;mBAAbA,MAAa;AAAA;;SAAbA,MAAa;EAAAsB,SAAbtB,MAAa;EAAAuB,YAFZ;AAAM","names":["environment","map","SearchService","constructor","http","api","searchTracks$","term","get","URL","pipe","dataRaw","data","filterResults","filter","track","isMatch","trackName","name","toLowerCase","artistName","artist","searchTerm","includes","factory","providedIn"],"sourceRoot":"","sources":["D:\\Angular-App\\spotify-app\\src\\app\\modules\\history\\services\\search.service.ts"],"sourcesContent":["import { environment } from './../../../../environments/environment';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchService {\n  private readonly URL = environment.api\n\n  constructor(private http: HttpClient) { }\n\n  searchTracks$(term: string): Observable<any> {\n    return this.http.get(`${this.URL}/tracks?src=${term}`)\n      .pipe(\n        map((dataRaw: any) => dataRaw.data)\n      )\n  }\n\n    private filterResults(data: any[], term: string): any[] {\n    // Filtra los resultados según la lógica deseada\n    return data.filter(track => this.isMatch(track, term));\n  }\n\n  private isMatch(track: any, term: string): boolean {\n    // Implementa la lógica de comparación aquí, por ejemplo, comparación de nombres, artistas, etc.\n    const trackName = track.name.toLowerCase();\n    const artistName = track.artist.toLowerCase();\n    const searchTerm = term.toLowerCase();\n\n    return trackName.includes(searchTerm) || artistName.includes(searchTerm);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}