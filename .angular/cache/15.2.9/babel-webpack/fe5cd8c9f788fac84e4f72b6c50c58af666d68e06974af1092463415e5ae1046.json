{"ast":null,"code":"import { of } from 'rxjs';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TrackService = /*#__PURE__*/(() => {\n  var _class;\n  class TrackService {\n    constructor(http) {\n      this.http = http;\n      this.URL = environment.api;\n    }\n    /**\r\n     *\r\n     * @returns Devolver todas las canciones! molonas! ðŸ¤˜ðŸ¤˜\r\n     */\n    skipById(listTracks, id) {\n      return new Promise((resolve, reject) => {\n        const listTmp = listTracks.filter(a => a._id !== id);\n        resolve(listTmp);\n      });\n    }\n    /**\r\n     * //TODO {data:[..1,...2,..2]}\r\n     *\r\n     * @returns\r\n     */\n    getAllTracks$() {\n      return this.http.get(`${this.URL}/tracks`).pipe(map(({\n        data\n      }) => {\n        return data;\n      }));\n    }\n    /**\r\n     *\r\n     * @returns Devolver canciones random\r\n     */\n    getAllRandom$() {\n      return this.http.get(`${this.URL}/tracks`).pipe(mergeMap(({\n        data\n      }) => this.skipById(data, 2)),\n      // map((dataRevertida) => { //TODO aplicar un filter comun de array\n      //   return dataRevertida.filter((track: TrackModel) => track._id !== 1)\n      // })\n      catchError(err => {\n        const {\n          status,\n          statusText\n        } = err;\n        return of([]);\n      }));\n    }\n  }\n  _class = TrackService;\n  _class.Éµfac = function TrackService_Factory(t) {\n    return new (t || _class)(i0.ÉµÉµinject(i1.HttpClient));\n  };\n  _class.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: _class,\n    factory: _class.Éµfac,\n    providedIn: 'root'\n  });\n  return TrackService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}