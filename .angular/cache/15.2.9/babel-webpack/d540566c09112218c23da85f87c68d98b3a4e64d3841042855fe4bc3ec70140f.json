{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport class InjectSessionInterceptor {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n  }\n  intercept(request, next) {\n    try {\n      const token = this.cookieService.get('token');\n      let newRequest = request;\n      newRequest = request.clone({\n        setHeaders: {\n          authorization: `Bearer ${token}`,\n          CUSTOM_HEADER: 'HOLA'\n        }\n      });\n      return next.handle(newRequest);\n    } catch (e) {\n      console.log('ðŸ”´ðŸ”´ðŸ”´ Ojito error', e);\n      return next.handle(request);\n    }\n  }\n}\n_class = InjectSessionInterceptor;\n_class.Éµfac = function InjectSessionInterceptor_Factory(t) {\n  return new (t || _class)(i0.ÉµÉµinject(i1.CookieService));\n};\n_class.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n  token: _class,\n  factory: _class.Éµfac\n});","map":{"version":3,"mappings":";;;AAWA,OAAM,MAAOA,wBAAwB;EAEnCC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;EAAmB;EAEpDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAI;MACF,MAAMC,KAAK,GAAG,IAAI,CAACJ,aAAa,CAACK,GAAG,CAAC,OAAO,CAAC;MAC7C,IAAIC,UAAU,GAAGJ,OAAO;MACxBI,UAAU,GAAGJ,OAAO,CAACK,KAAK,CACxB;QACEC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK,EAAE;UAChCM,aAAa,EAAE;;OAElB,CACF;MAED,OAAOP,IAAI,CAACQ,MAAM,CAACL,UAAU,CAAC;KAE/B,CAAC,OAAOM,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,CAAC,CAAC;MACpC,OAAOT,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;;EAE/B;;SAvBWJ,wBAAwB;;mBAAxBA,MAAwB;AAAA;;SAAxBA,MAAwB;EAAAiB,SAAxBjB,MAAwB;AAAA","names":["InjectSessionInterceptor","constructor","cookieService","intercept","request","next","token","get","newRequest","clone","setHeaders","authorization","CUSTOM_HEADER","handle","e","console","log","factory"],"sourceRoot":"","sources":["D:\\Angular-App\\spotify-app\\src\\app\\core\\interceptors\\inject-session.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable()\nexport class InjectSessionInterceptor implements HttpInterceptor {\n\n  constructor(private cookieService: CookieService) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    try {\n      const token = this.cookieService.get('token')\n      let newRequest = request\n      newRequest = request.clone(\n        {\n          setHeaders: {\n            authorization: `Bearer ${token}`,\n            CUSTOM_HEADER: 'HOLA'\n          }\n        }\n      )\n\n      return next.handle(newRequest);\n\n    } catch (e) {\n      console.log('ðŸ”´ðŸ”´ðŸ”´ Ojito error', e)\n      return next.handle(request);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}