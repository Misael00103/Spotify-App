{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let MultimediaService = /*#__PURE__*/(() => {\n  var _class;\n  class MultimediaService {\n    constructor() {\n      this.callback = new EventEmitter();\n      this.trackInfo$ = new BehaviorSubject(undefined);\n      this.timeElapsed$ = new BehaviorSubject('00:00');\n      this.timeRemaining$ = new BehaviorSubject('-00:00');\n      this.playerStatus$ = new BehaviorSubject('paused');\n      this.playerPercentage$ = new BehaviorSubject(0);\n      this.setPlayerStatus = state => {\n        switch (state.type) {\n          //TODO: --> playing\n          case 'play':\n            this.playerStatus$.next('play');\n            break;\n          case 'playing':\n            this.playerStatus$.next('playing');\n            break;\n          case 'ended':\n            this.playerStatus$.next('ended');\n            break;\n          default:\n            this.playerStatus$.next('paused');\n            break;\n        }\n      };\n      this.calculateTime = () => {\n        const {\n          duration,\n          currentTime\n        } = this.audio;\n        this.setTimeElapsed(currentTime);\n        this.setRemaining(currentTime, duration);\n        this.setPercentage(currentTime, duration);\n      };\n      this.audio = new Audio();\n      this.trackInfo$.subscribe(responseOK => {\n        if (responseOK) {\n          this.setAudio(responseOK);\n        }\n      });\n      this.listenAllEvents();\n    }\n    listenAllEvents() {\n      this.audio.addEventListener('timeupdate', this.calculateTime, false);\n      this.audio.addEventListener('playing', this.setPlayerStatus, false);\n      this.audio.addEventListener('play', this.setPlayerStatus, false);\n      this.audio.addEventListener('pause', this.setPlayerStatus, false);\n      this.audio.addEventListener('ended', this.setPlayerStatus, false);\n    }\n    setPercentage(currentTime, duration) {\n      //TODO duration ---> 100%\n      //TODO currentTime ---> (x)\n      //TODO (currentTime * 100) / duration\n      let percentage = currentTime * 100 / duration;\n      this.playerPercentage$.next(percentage);\n    }\n    setTimeElapsed(currentTime) {\n      let seconds = Math.floor(currentTime % 60); //TODO 1,2,3\n      let minutes = Math.floor(currentTime / 60 % 60);\n      //TODO  00:00 ---> 01:05 --> 10:15\n      const displaySeconds = seconds < 10 ? `0${seconds}` : seconds;\n      const displayMinutes = minutes < 10 ? `0${minutes}` : minutes;\n      const displayFormat = `${displayMinutes}:${displaySeconds}`;\n      this.timeElapsed$.next(displayFormat);\n    }\n    setRemaining(currentTime, duration) {\n      let timeLeft = duration - currentTime;\n      let seconds = Math.floor(timeLeft % 60);\n      let minutes = Math.floor(timeLeft / 60 % 60);\n      const displaySeconds = seconds < 10 ? `0${seconds}` : seconds;\n      const displayMinutes = minutes < 10 ? `0${minutes}` : minutes;\n      const displayFormat = `-${displayMinutes}:${displaySeconds}`;\n      this.timeRemaining$.next(displayFormat);\n    }\n    //TODO: Funciones publicas\n    setAudio(track) {\n      console.log('🐱‍🏍🐱‍🏍🐱‍🏍🐱‍🏍🐱‍🏍', track);\n      this.audio.src = track.url;\n      this.audio.play();\n    }\n    togglePlayer() {\n      this.audio.paused ? this.audio.play() : this.audio.pause();\n    }\n    seekAudio(percentage) {\n      const {\n        duration\n      } = this.audio;\n      const percentageToSecond = percentage * duration / 100;\n      this.audio.currentTime = percentageToSecond;\n    }\n  }\n  _class = MultimediaService;\n  _class.ɵfac = function MultimediaService_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return MultimediaService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}