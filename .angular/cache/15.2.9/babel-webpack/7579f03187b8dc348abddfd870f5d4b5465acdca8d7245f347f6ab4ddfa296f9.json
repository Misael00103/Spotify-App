{"ast":null,"code":"var _class;\nimport { EventEmitter } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class MultimediaService {\n  constructor() {\n    this.callback = new EventEmitter();\n    this.trackInfo$ = new BehaviorSubject(undefined);\n    this.timeElapsed$ = new BehaviorSubject('00:00');\n    this.timeRemaining$ = new BehaviorSubject('-00:00');\n    this.playerStatus$ = new BehaviorSubject('paused');\n    this.playerPercentage$ = new BehaviorSubject(0);\n    this.setPlayerStatus = state => {\n      switch (state.type) {\n        //TODO: --> playing\n        case 'play':\n          this.playerStatus$.next('play');\n          break;\n        case 'playing':\n          this.playerStatus$.next('playing');\n          break;\n        case 'ended':\n          this.playerStatus$.next('ended');\n          break;\n        default:\n          this.playerStatus$.next('paused');\n          break;\n      }\n    };\n    this.calculateTime = () => {\n      const {\n        duration,\n        currentTime\n      } = this.audio;\n      this.setTimeElapsed(currentTime);\n      this.setRemaining(currentTime, duration);\n      this.setPercentage(currentTime, duration);\n    };\n    this.audio = new Audio();\n    this.trackInfo$.subscribe(responseOK => {\n      if (responseOK) {\n        this.setAudio(responseOK);\n      }\n    });\n    this.listenAllEvents();\n  }\n  listenAllEvents() {\n    this.audio.addEventListener('timeupdate', this.calculateTime, false);\n    this.audio.addEventListener('playing', this.setPlayerStatus, false);\n    this.audio.addEventListener('play', this.setPlayerStatus, false);\n    this.audio.addEventListener('pause', this.setPlayerStatus, false);\n    this.audio.addEventListener('ended', this.setPlayerStatus, false);\n  }\n  setPercentage(currentTime, duration) {\n    //TODO duration ---> 100%\n    //TODO currentTime ---> (x)\n    //TODO (currentTime * 100) / duration\n    let percentage = currentTime * 100 / duration;\n    this.playerPercentage$.next(percentage);\n  }\n  setTimeElapsed(currentTime) {\n    let seconds = Math.floor(currentTime % 60); //TODO 1,2,3\n    let minutes = Math.floor(currentTime / 60 % 60);\n    //TODO  00:00 ---> 01:05 --> 10:15\n    const displaySeconds = seconds < 10 ? `0${seconds}` : seconds;\n    const displayMinutes = minutes < 10 ? `0${minutes}` : minutes;\n    const displayFormat = `${displayMinutes}:${displaySeconds}`;\n    this.timeElapsed$.next(displayFormat);\n  }\n  setRemaining(currentTime, duration) {\n    let timeLeft = duration - currentTime;\n    let seconds = Math.floor(timeLeft % 60);\n    let minutes = Math.floor(timeLeft / 60 % 60);\n    const displaySeconds = seconds < 10 ? `0${seconds}` : seconds;\n    const displayMinutes = minutes < 10 ? `0${minutes}` : minutes;\n    const displayFormat = `-${displayMinutes}:${displaySeconds}`;\n    this.timeRemaining$.next(displayFormat);\n  }\n  //TODO: Funciones publicas\n  setAudio(track) {\n    console.log('🐱‍🏍🐱‍🏍🐱‍🏍🐱‍🏍🐱‍🏍', track);\n    this.audio.src = track.url;\n    this.audio.play();\n  }\n  togglePlayer() {\n    this.audio.paused ? this.audio.play() : this.audio.pause();\n  }\n  seekAudio(percentage) {\n    const {\n      duration\n    } = this.audio;\n    const percentageToSecond = percentage * duration / 100;\n    this.audio.currentTime = percentageToSecond;\n  }\n}\n_class = MultimediaService;\n_class.ɵfac = function MultimediaService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","BehaviorSubject","MultimediaService","constructor","undefined","state","type","playerStatus$","next","duration","currentTime","audio","setTimeElapsed","setRemaining","setPercentage","Audio","trackInfo$","subscribe","responseOK","setAudio","listenAllEvents","addEventListener","calculateTime","setPlayerStatus","percentage","playerPercentage$","seconds","Math","floor","minutes","displaySeconds","displayMinutes","displayFormat","timeElapsed$","timeLeft","timeRemaining$","track","console","log","src","url","play","togglePlayer","paused","pause","seekAudio","percentageToSecond","factory","providedIn"],"sourceRoot":"","sources":["D:\\Angular-App\\spotify-app\\src\\app\\shared\\services\\multimedia.service.ts"],"sourcesContent":["import { TrackModel } from './../../core/models/tracks.model';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Observer, Subject } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MultimediaService {\n  callback: EventEmitter<any> = new EventEmitter<any>()\n\n  public trackInfo$: BehaviorSubject<any> = new BehaviorSubject(undefined)\n  public audio!: HTMLAudioElement //TODO <audio>\n  public timeElapsed$: BehaviorSubject<string> = new BehaviorSubject('00:00')\n  public timeRemaining$: BehaviorSubject<string> = new BehaviorSubject('-00:00')\n  public playerStatus$: BehaviorSubject<string> = new BehaviorSubject('paused')\n  public playerPercentage$: BehaviorSubject<number> = new BehaviorSubject(0)\n\n  constructor() {\n\n    this.audio = new Audio()\n\n    this.trackInfo$.subscribe(responseOK => {\n      if (responseOK) {\n        this.setAudio(responseOK)\n      }\n    })\n\n    this.listenAllEvents()\n\n  }\n\n  private listenAllEvents(): void {\n\n    this.audio.addEventListener('timeupdate', this.calculateTime, false)\n    this.audio.addEventListener('playing', this.setPlayerStatus, false)\n    this.audio.addEventListener('play', this.setPlayerStatus, false)\n    this.audio.addEventListener('pause', this.setPlayerStatus, false)\n    this.audio.addEventListener('ended', this.setPlayerStatus, false)\n\n  }\n\n  private setPlayerStatus = (state: any) => {\n    switch (state.type) { //TODO: --> playing\n      case 'play':\n        this.playerStatus$.next('play')\n        break\n      case 'playing':\n        this.playerStatus$.next('playing')\n        break\n      case 'ended':\n        this.playerStatus$.next('ended')\n        break\n      default:\n        this.playerStatus$.next('paused')\n        break;\n    }\n\n  }\n\n  private calculateTime = () => {\n    const { duration, currentTime } = this.audio\n    this.setTimeElapsed(currentTime)\n    this.setRemaining(currentTime, duration)\n    this.setPercentage(currentTime, duration)\n  }\n\n  private setPercentage(currentTime: number, duration: number): void {\n    //TODO duration ---> 100%\n    //TODO currentTime ---> (x)\n    //TODO (currentTime * 100) / duration\n    let percentage = (currentTime * 100) / duration;\n    this.playerPercentage$.next(percentage)\n  }\n\n\n  private setTimeElapsed(currentTime: number): void {\n    let seconds = Math.floor(currentTime % 60) //TODO 1,2,3\n    let minutes = Math.floor((currentTime / 60) % 60)\n    //TODO  00:00 ---> 01:05 --> 10:15\n    const displaySeconds = (seconds < 10) ? `0${seconds}` : seconds;\n    const displayMinutes = (minutes < 10) ? `0${minutes}` : minutes;\n    const displayFormat = `${displayMinutes}:${displaySeconds}`\n    this.timeElapsed$.next(displayFormat)\n  }\n\n  private setRemaining(currentTime: number, duration: number): void {\n    let timeLeft = duration - currentTime;\n    let seconds = Math.floor(timeLeft % 60)\n    let minutes = Math.floor((timeLeft / 60) % 60)\n    const displaySeconds = (seconds < 10) ? `0${seconds}` : seconds;\n    const displayMinutes = (minutes < 10) ? `0${minutes}` : minutes;\n    const displayFormat = `-${displayMinutes}:${displaySeconds}`\n    this.timeRemaining$.next(displayFormat)\n  }\n\n\n  //TODO: Funciones publicas\n\n  public setAudio(track: TrackModel): void {\n    console.log('🐱‍🏍🐱‍🏍🐱‍🏍🐱‍🏍🐱‍🏍', track);\n    this.audio.src = track.url\n    this.audio.play()\n  }\n\n  public togglePlayer(): void {\n    (this.audio.paused) ? this.audio.play() : this.audio.pause()\n  }\n\n  public seekAudio(percentage: number): void {\n    const { duration } = this.audio\n    const percentageToSecond = (percentage * duration) / 100\n    this.audio.currentTime = percentageToSecond\n\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}