{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nimport * as i2 from \"@angular/router\";\nexport class SessionGuard {\n  constructor(cookieService, router) {\n    this.cookieService = cookieService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.checkCookieSession();\n  }\n  checkCookieSession() {\n    try {\n      const token = this.cookieService.check('token');\n      if (!token) {\n        this.router.navigate(['/', 'auth']);\n      }\n      return token;\n    } catch (e) {\n      console.log('Algo sucedio ?? ðŸ”´', e);\n      return false;\n    }\n  }\n}\n_class = SessionGuard;\n_class.Éµfac = function SessionGuard_Factory(t) {\n  return new (t || _class)(i0.ÉµÉµinject(i1.CookieService), i0.ÉµÉµinject(i2.Router));\n};\n_class.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n  token: _class,\n  factory: _class.Éµfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAQA,OAAM,MAAOA,YAAY;EAEvBC,YACUC,aAA4B,EAC5BC,MAAc;IADd,kBAAa,GAAbD,aAAa;IACb,WAAM,GAANC,MAAM;EAEhB;EAEAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,OAAO,IAAI,CAACC,kBAAkB,EAAE;EAClC;EAEAA,kBAAkB;IAChB,IAAI;MAEF,MAAMC,KAAK,GAAY,IAAI,CAACN,aAAa,CAACO,KAAK,CAAC,OAAO,CAAC;MACxD,IAAI,CAACD,KAAK,EAAE;QACV,IAAI,CAACL,MAAM,CAACO,QAAQ,CAAC,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;MAErC,OAAOF,KAAK;KAEb,CAAC,OAAOG,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,CAAC,CAAC;MACpC,OAAO,KAAK;;EAGhB;;SA5BWX,YAAY;;mBAAZA,MAAY;AAAA;;SAAZA,MAAY;EAAAc,SAAZd,MAAY;EAAAe,YAFX;AAAM","names":["SessionGuard","constructor","cookieService","router","canActivate","route","state","checkCookieSession","token","check","navigate","e","console","log","factory","providedIn"],"sourceRoot":"","sources":["D:\\Angular-App\\spotify-app\\src\\app\\core\\guards\\session.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionGuard  {\n\n  constructor(\n    private cookieService: CookieService,\n    private router: Router) {\n\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.checkCookieSession();\n  }\n\n  checkCookieSession(): boolean {\n    try {\n\n      const token: boolean = this.cookieService.check('token')\n      if (!token) {\n        this.router.navigate(['/', 'auth'])\n      }\n      return token\n\n    } catch (e) {\n      console.log('Algo sucedio ?? ðŸ”´', e);\n      return false\n    }\n\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}